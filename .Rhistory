source('D:/R/DeconvDataVisualisation.R')
source('D:/R/DeconvDataVisualisation.R')
source('D:/R/populationPyramid.R')
??venn
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
??read.table
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
install(VennDiagram)
install.packages(VennDiagram)
install.packages("VennDiagram")
source('~/.active-rstudio-document')
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
?venn
install.packages("Vennerable", repos="http://R-Forge.R-project.org")
install.packages(c("graph", "RBGL"), dependencies=TRUE)
library(Vennerable)
setRepositories()
chooseBioCmirror()
install.packages("Vennerable", repos="http://R-Forge.R-project.org")
install.packages(c("graph", "RBGL"), dependencies=TRUE)
library(Vennerable)
install.packages("Vennerable")
library(Vennerable)
install.packages()
install.packages("Vennerable")
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
source('D:/R/VennDiagram.R')
source('D:/R/clusterAnalysis/HeatMapSeparateClusteringForRowsAndColumn.R')
source('D:/R/OverlappingHistogramForDiffCellinesData.R')
source('D:/R/OverlappingDensityPlotsForDiffCelllinesData.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
source('D:/R/sampleVsControlDensityPlot.R')
load(kernSmooth)
install.packages("kernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
packageDescription(KernSmooth)
packageDescription("KernSmooth")
packageDescription("KernSmooth", field="URL")
packageDescription("KernSmooth", fields="URL")
packageDescription("KernSmooth", fields="Author")
packageDescription("KernSmooth", fields="Depends")
available.packages()
a=available.packages()
head(rownames(a),3)
head(rownames(a),13)
head(rownames(a),50)
len(a)
length(a)
nrow(a)
install.packages("slidify")
install.packages("devtools")
install.packages("slidify")
search()
find.package("devtools")
library(devtools)
find_rtools()
ggplot(iris,aes(Sepal.Length,Sepal.Width, color=Species)) +
geom_point(aes(shape=Species),size=3)+
geom_smooth(method="lm")
library(ggplot2)
ggplot(iris,aes(Sepal.Length,Sepal.Width, color=Species)) +
geom_point(aes(shape=Species),size=3)+
geom_smooth(method="lm")
facet_grid(. ~ Species)
ggplot(iris,aes(Sepal.Length,Sepal.Width, color=Species)) +
geom_point(aes(shape=Species),size=3)+
geom_smooth(method="lm") +
facet_grid(. ~ Species)
ggplot(iris,aes(Sepal.Length,Sepal.Width, color=Species)) +
geom_point(aes(shape=Species),size=3)+
geom_smooth(method="lm") +
facet_grid(Species ~ .)
source('D:/R/ggplot_Eg.R')
s
?theme()
source('D:/R/ggplot_Eg.R')
s
?element_rect
source('D:/R/ggplot_Eg.R')
s
source('D:/R/ggplot_Eg.R')
s
source('D:/R/ggplot_Eg.R')
s
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
s
source('D:/R/ggplot_Eg.R')
s
?theme
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
s
source('D:/R/ggplot_Eg.R')
s
install.packages("ggthemes")
library(ggthemes)
s +theme_stata()
s +theme_excel()
s +theme_wsj()
s +theme_solarized()
??ggthemes
s +theme_tufte()
s +theme_pander()
s +theme_fivethirtyeight()
s +theme_few()
s +theme_gdocs()
s +theme_calc()
s +theme_economist()+scale_colour_economist()+ ggtitle("Diamonds Are Forever")
s +theme_economist()
s+theme_igray()
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
s
s + scale_y_continuous(labels=paste0(1:5," cms"),breaks= seq(1,5, by=0.5))
s + scale_y_continuous(labels=paste0(1:5," cms"),breaks= seq(1,5, by=1))
s + scale_y_continuous(labels=paste0(0:5," cms"),breaks= seq(0,5, by=1))
s + scale_y_continuous(labels=paste0(2:8," cms"),breaks= seq(2,8, by=1))
k<- ggplot(faithful ,aes(x=waiting)) + geom_histogram(binwidth=30, k<- ggplot(faithful ,aes(x=waiting)) + geom_histogram(binwidth=30, colour="black")
;
k<- ggplot(faithful ,aes(x=waiting)) + geom_histogram(binwidth=30, colour="black")
k
k +geom_histogram(binwidth=8, fill="steelblue", colour="black")
k<- ggplot(faithful ,aes(x=waiting)) + geom_histogram(binwidth=8, fill="steelblue", colour="black")
k
k + geom_histogram(aes(fill= ..count..),color="black")
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
k
source('D:/R/ggplot_Eg.R')
u
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/ggplot_Eg.R')
source('D:/R/test.R')
lsa <- function()
{
obj_type <- function(x) { class(get(x)) }
foo=data.frame(sapply(ls(envir=.GlobalEnv),obj_type))
foo$object_name=rownames(foo)
names(foo)[1]="class"
names(foo)[2]="object"
return(unrowname(foo))
}
lsa()
lsa(ls)
??unrowname
library(plyr)
lsa <- function()
{
obj_type <- function(x) { class(get(x)) }
foo=data.frame(sapply(ls(envir=.GlobalEnv),obj_type))
foo$object_name=rownames(foo)
names(foo)[1]="class"
names(foo)[2]="object"
return(unrowname(foo))
}
lsa
lsa()
source('D:/R/test.R')
lsp <-function(package, all.names = FALSE, pattern)
{
package <- deparse(substitute(package))
ls(
pos = paste("package", package, sep = ":"),
all.names = all.names,
pattern = pattern
)
}
lsp()
lsp("ggplot")
lsp("ggplot2")
lsp(ggplot2)
deparse(substitute(ggplot2)
)
?deparse
?substitute
R_USER
R_USER()
$R_USER()
$R_USER
${HOMEDRIVE}${HOMEPATH}
Sys.getenv("R_USER")
Sys.getenv("HOMEPATH")
Sys.getenv("HOMEDRIVE")
old.packages()
installed.packages()
old.packages()
head(old.packages())
a=old.packages()
head(a)
a = a$Package
b = a$Package
str(a)
dim(a)
str(a)
class(a)
a[,1]
b=a[,1]
b
updata.packages(b)
update.packages(b)
update.packages(b)
update.packages(list=b)
old.packages()
b=rownames(a)
b
?update.paclages
?update.packages
update.packages(oldPkgs=b)
update.packages(oldPkgs=b,ask = FALSE)
old.packages()
traceback()
data()
data(package = .packages(all.available = TRUE))
rtPCR
data(rtPCR)
a=rtPCR
library(kernlab)
rbinom(10,1,0.5)
rbinom(10,2,0.5)
rbinom(10,2,0.5)
rbinom(10,2,0.5)
rbinom(10,2,0.5)
rbinom(10,2,0.3)
rbinom(10,2,0.3)
rbinom(10,2,0.3)
rbinom(10,1,0.3)
rbinom(10,1,0.5)
rbinom(10,1,0.5)
library(devtools)
install.packages("Rtools")
R
version()
r.version()
R.Version()
if(!require(installr)) {
install.packages("installr"); require(installr)}
updateR()
require(rtools)
require(Rtools)
install.packages("Rtools")
library(devtools)
data <- read.csv(unz("activity.zip", "activity.csv"))
print(head(data))
data=data[!is.na(data$steps),]
data <- read.csv(unz("activity.zip", "activity.csv"))
print(head(data))
data=data[!is.na(data$steps),]
data <- read.csv(unz("activity.zip", "activity.csv"))
print(head(data))
data=data[!is.na(data$steps),]
getwd()
setwd("D:/R/courseraProject/ReproducibleResearch/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"))
print(head(data))
data=data[!is.na(data$steps),]
data=data[!is.na(data$steps),]
data <- read.csv(unz("activity.zip", "activity.csv"))
print(head(data))
data=data[!is.na(data$steps),]
data <- read.csv(unz("activity.zip", "activity.csv"))
print(head(data))
data=data[!is.na(data$steps),]
#Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
library(ggplot2)
library(ggthemes)
library(dplyr)
interval_tbl=data_tbl %>% group_by(interval) %>%
summarise(AveragedSteps = mean(steps)) %>%
print
#ggplot(interval_tbl,aes(interval,AveragedSteps))+geom_line()
#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
#plot(interval_tbl$interval,interval_tbl$AveragedSteps)
ungroup(interval_tbl)
interval_with_max_steps=interval_tbl[interval_tbl$AveragedSteps==max(interval_tbl$AveragedSteps),]
min_scale=min(as.numeric(levels(interval_tbl$interval)))
max_scale=max(as.numeric(levels(interval_tbl$interval)))
gg=ggplot(interval_tbl,aes(interval,AveragedSteps)) + geom_point(aes(y=AveragedSteps,colour=AveragedSteps)) +  geom_line(aes(y=AveragedSteps, group=1)) +
scale_x_discrete(breaks = seq(min_scale, max_scale, by = 100)) + ggtitle("Averagesteps across 5 mins interval")
#print(filter(interval_tbl,AveragedSteps==max(interval_tbl$AveragedSteps)))
library(ggplot2)
library(ggthemes)
library(dplyr)
data_tbl= tbl_df(data)
data_tbl$interval <- as.factor(data_tbl$interval)
#Calculate the total number of steps taken per day
data_tbl %>% group_by(date)  %>% summarise(totalsteps=sum(steps)) %>% print %>% ggplot(aes(date,totalsteps)) + geom_bar(stat = "identity") + ggtitle("Total number of steps taken per day") + theme_gdocs() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
#Calculate and report the mean and median of the total number of steps taken per day
data_tbl %>% group_by(date)  %>% summarise(totalsteps=sum(steps),Entries_per_day=n(),totalsteps_mean=mean(steps),totalsteps_median=median(steps)) %>% print
#Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
library(ggplot2)
library(ggthemes)
library(dplyr)
interval_tbl=data_tbl %>% group_by(interval) %>%
summarise(AveragedSteps = mean(steps)) %>%
print
#ggplot(interval_tbl,aes(interval,AveragedSteps))+geom_line()
#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
#plot(interval_tbl$interval,interval_tbl$AveragedSteps)
ungroup(interval_tbl)
interval_with_max_steps=interval_tbl[interval_tbl$AveragedSteps==max(interval_tbl$AveragedSteps),]
min_scale=min(as.numeric(levels(interval_tbl$interval)))
max_scale=max(as.numeric(levels(interval_tbl$interval)))
gg=ggplot(interval_tbl,aes(interval,AveragedSteps)) + geom_point(aes(y=AveragedSteps,colour=AveragedSteps)) +  geom_line(aes(y=AveragedSteps, group=1)) +
scale_x_discrete(breaks = seq(min_scale, max_scale, by = 100)) + ggtitle("Averagesteps across 5 mins interval")
#print(filter(interval_tbl,AveragedSteps==max(interval_tbl$AveragedSteps)))
gg
gg+theme_gdocs()
gg=ggplot(interval_tbl,aes(interval,AveragedSteps)) + geom_point(aes(y=AveragedSteps,colour=AveragedSteps)) + theme_gdocs()  geom_line(aes(y=AveragedSteps, group=1)) +
scale_x_discrete(breaks = seq(min_scale, max_scale, by = 100)) + ggtitle("Averagesteps across 5 mins interval")
gg=ggplot(interval_tbl,aes(interval,AveragedSteps)) + geom_point(aes(y=AveragedSteps,colour=AveragedSteps)) + theme_gdocs() + geom_line(aes(y=AveragedSteps, group=1)) +
scale_x_discrete(breaks = seq(min_scale, max_scale, by = 100)) + ggtitle("Averagesteps across 5 mins interval")
gg
gg +  geom_text(data = interval_tbl, aes(x = interval * 1.05, y = AveragedSteps, label = "my label"))
gg +  geom_text(data = interval_tbl, aes(x = interval , y = AveragedSteps, label = "my label"))
gg +  geom_text(data = interval_tbl, aes(x = interval , y = max(AveragedSteps), label = "my label"))
gg +  geom_text(data = interval_with_max_steps, aes(x = interval , y = AveragedSteps, label = "my label"))
#Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
library(ggplot2)
library(ggthemes)
library(dplyr)
interval_tbl=data_tbl %>% group_by(interval) %>%
summarise(AveragedSteps = mean(steps)) %>%
print
#ggplot(interval_tbl,aes(interval,AveragedSteps))+geom_line()
#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
#plot(interval_tbl$interval,interval_tbl$AveragedSteps)
ungroup(interval_tbl)
interval_with_max_steps=interval_tbl[interval_tbl$AveragedSteps==max(interval_tbl$AveragedSteps),]
min_scale=min(as.numeric(levels(interval_tbl$interval)))
max_scale=max(as.numeric(levels(interval_tbl$interval)))
gg=ggplot(interval_tbl,aes(interval,AveragedSteps))
gg=gg + geom_point(aes(y=AveragedSteps,colour=AveragedSteps))
gg=gg + theme_gdocs() + geom_line(aes(y=AveragedSteps, group=1))
gg=gg + scale_x_discrete(breaks = seq(min_scale, max_scale, by = 100))
gg=gg + ggtitle("Averagesteps (across all the days) in 5 mins interval")
gg=gg +geom_text(data = interval_with_max_steps, aes(x = interval , y = AveragedSteps, label = "MaxStep"))
#print(filter(interval_tbl,AveragedSteps==max(interval_tbl$AveragedSteps)))
#Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
library(ggplot2)
library(ggthemes)
library(dplyr)
interval_tbl=data_tbl %>% group_by(interval) %>%
summarise(AveragedSteps = mean(steps)) %>%
print
#ggplot(interval_tbl,aes(interval,AveragedSteps))+geom_line()
#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
#plot(interval_tbl$interval,interval_tbl$AveragedSteps)
ungroup(interval_tbl)
interval_with_max_steps=interval_tbl[interval_tbl$AveragedSteps==max(interval_tbl$AveragedSteps),]
min_scale=min(as.numeric(levels(interval_tbl$interval)))
max_scale=max(as.numeric(levels(interval_tbl$interval)))
gg=ggplot(interval_tbl,aes(interval,AveragedSteps))
gg=gg + geom_point(aes(y=AveragedSteps,colour=AveragedSteps))
gg=gg + theme_gdocs() + geom_line(aes(y=AveragedSteps, group=1))
gg=gg + scale_x_discrete(breaks = seq(min_scale, max_scale, by = 100))
gg=gg + ggtitle("Averagesteps (across all the days) in 5 mins interval")
gg=gg +geom_text(data = interval_with_max_steps, aes(x = interval , y = AveragedSteps, label = "MaxStep"))
plot(gg)
#print(filter(interval_tbl,AveragedSteps==max(interval_tbl$AveragedSteps)))
unprocesseddata <- read.csv(unz("activity.zip", "activity.csv"))
print(head(data))
data=unprocesseddata[!is.na(unprocesseddata$steps),]
nrow(unprocesseddata[is.na(unprocesseddata$steps),])
View(data_tbl)
data_tbl %>% group_by(date)  %>% summarise(totalsteps=sum(steps))
View(unprocesseddata)
data_tbl %>% group_by(date)  %>% summarise(meandaysteps=mean(steps))
View(data_tbl)
?round
data_tbl %>% group_by(date,interval)  %>% summarise(meandaysteps=mean(steps))
data_tbl %>% group_by(interval)  %>% summarise(meandaysteps=mean(steps))
?isna
??isna
??is.na
